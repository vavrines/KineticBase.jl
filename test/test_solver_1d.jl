cd(@__DIR__)
ks, ctr, face, simTime = KB.initialize("config_1d0f.txt")
KB.extract_sol(ks, ctr)

using KitBase.JLD2
set = ks
t = 0.0
cd(@__DIR__)
@save "restart.jld2" set ctr t
ks, ctr, face, simTime = KB.initialize("restart.jld2")

dt = KB.timestep(ks, ctr, 0.0)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:period)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:extra)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:balance)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:mirror)
t = KB.solve!(ks, ctr, face, 0.0)
KB.evolve!(ks, ctr, face, dt; mode=:roe)

ks, ctr, face, simTime = KB.initialize("config_1d0f2s.txt")
dt = KB.timestep(ks, ctr, 0.0)
KB.update!(ks, ctr, face, dt, zeros(3, 2); bc=:extra)
KB.update!(ks, ctr, face, dt, zeros(3, 2); bc=:period)
KB.update!(ks, ctr, face, dt, zeros(3, 2); bc=:balance)
KB.update!(ks, ctr, face, dt, zeros(3, 2); bc=:mirror)
KB.evolve!(ks, ctr, face, dt; mode=:gks)

ks, ctr, face, simTime = KB.initialize("config_1d1f1v.txt")
KB.reconstruct!(ks, ctr)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:extra)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:period)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:balance)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:mirror)
KB.evolve!(ks, ctr, face, dt; mode=:kfvs)
KB.evolve!(ks, ctr, face, dt; mode=:kcu)

ks, ctr, face, simTime = KB.initialize("config_1d1f3v.txt")
KB.reconstruct!(ks, ctr)
KB.update!(ks, ctr, face, dt, zeros(5); bc=:extra)
KB.update!(ks, ctr, face, dt, zeros(5); bc=:period)
KB.update!(ks, ctr, face, dt, zeros(5); bc=:balance)
KB.update!(ks, ctr, face, dt, zeros(5); bc=:mirror)
KB.evolve!(ks, ctr, face, dt; mode=:kfvs)
KB.evolve!(ks, ctr, face, dt; mode=:kcu)

ks, ctr, face, simTime = KB.initialize("config_1d2f.txt")
KB.reconstruct!(ks, ctr)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:extra)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:period)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:balance)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:mirror)
KB.evolve!(ks, ctr, face, dt; mode=:kfvs)
KB.evolve!(ks, ctr, face, dt; mode=:kcu)

gas = KB.Gas()
ks1 = KB.SolverSet(ks.set, ks.ps, ks.vs, gas, ks.ib, ks.outputFolder)
KB.init_ptc!(ks1, ctr; mode=:soa)
KB.init_ptc!(ks1, ctr; mode=:aos)

ks, ctr, face, simTime = KB.initialize("config_1d2f2s.txt")
KB.reconstruct!(ks, ctr)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:extra)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:period)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:balance)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:mirror)
KB.evolve!(ks, ctr, face, dt; mode=:kfvs)
KB.evolve!(ks, ctr, face, dt; mode=:kcu)

ks, ctr, face, simTime = KB.initialize("config_1d4f2s.txt")
KB.reconstruct!(ks, ctr)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:extra)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:period)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:balance)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:mirror)
KB.evolve!(ks, ctr, face, dt; mode=:kfvs)
KB.evolve!(ks, ctr, face, dt; mode=:kcu)

ks, ctr, face, simTime = KB.initialize("config_1d3f2s.txt")
KB.reconstruct!(ks, ctr)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:extra)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:period)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:balance)
KB.update!(ks, ctr, face, dt, zeros(3); bc=:mirror)
KB.evolve!(ks, ctr, face, dt; mode=:kfvs)
KB.evolve!(ks, ctr, face, dt; mode=:kcu)
